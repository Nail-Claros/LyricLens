name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger CI/CD on push to main
  pull_request:
    branches:
      - main  # Trigger CI/CD on pull requests to main

jobs:
  # 1. Install dependencies and set up environment
  setup:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'  # Specify Python version
    
    - name: Install dependencies
      run: |
        python -m venv venv
        . venv/bin/activate
        pip install -r requirements.txt  # Install dependencies from requirements.txt

    - name: Set up Redis
      run: |
        sudo apt-get install redis-server  # Install Redis for testing
        redis-server --daemonize yes  # Start Redis in the background
    
    - name: Set up AWS CLI
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install
    
    - name: Configure AWS credentials
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_KEY }}
        aws configure set region us-east-1  # Specify your region

    # 2. Run tests
  test:
    runs-on: ubuntu-latest
    needs: setup  # Runs after the setup job
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    
    - name: Install dependencies
      run: |
        python -m venv venv
        . venv/bin/activate
        pip install -r requirements.txt
    
    - name: Run unit tests
      run: |
        . venv/bin/activate
        pytest tests/  # Run your test directory or test script

    - name: Check Redis connection
      run: |
        redis-cli ping  # Ensure Redis is running and the connection works

    # 3. Deploy to Heroku
  deploy:
    runs-on: ubuntu-latest
    needs: test  # Runs after the test job
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: Set up Heroku CLI
      uses: akshnz/heroku-cli-action@v1
      with:
        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
    
    - name: Log in to Heroku
      run: |
        echo "Logging into Heroku"
        heroku auth:token  # Authenticate with Heroku CLI using the token
    
    - name: Push to Heroku
      run: |
        git remote add heroku https://git.heroku.com/${{ secrets.HEROKU_APP_NAME }}.git
        git push heroku main  # Push the changes to Heroku
    
    - name: Set environment variables in Heroku
      run: |
        heroku config:set REDIS_URL=${{ secrets.REDIS_URL }}
        heroku config:set AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}
        heroku config:set AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}
        heroku config:set S3_BUCKET=${{ secrets.S3_BUCKET }}
        heroku config:set sec_key=${{ secrets.SEC_KEY }}
    
    - name: Notify deployment success
      run: echo "Deployed successfully to Heroku!"

  # 4. Clean up db
  cleanup:
    runs-on: ubuntu-latest
    if: always()  # Always runs after the deploy job, regardless of success/failure
    
    steps:
    - name: Clean up Redis
      run: |
        redis-cli shutdown  # Shut down the Redis server if no longer needed
